#include<stdio.h>
#include<stdlib.h>
//用hash map 解

typedef struct hashnode{
    int key;
    int idx;
    struct hashnode* next;
}hashnode;

int hashfunction(int key, int tablesize){   
    int result=abs(key) % tablesize;//先取絕對值在取mod
    return result;
}

//insert node
void insert(hashnode** hashtable,int key, int idx, int tablesize){
    int tableidx= hashfunction(key, tablesize);
    hashnode* newnode=(hashnode*)malloc (sizeof(hashnode));
    newnode->key=key;
    newnode->idx=idx;
    newnode->next=hashtable[tableidx];
    hashtable[tableidx]=newnode;
}

int find(hashnode** hashtable, int key, int tablesize){
    int tableidx=hashfunction(key, tablesize);
    hashnode* temp=hashtable[tableidx];
    while(temp!= NULL){
        if(temp->key==key){
            //找到了
            int result=temp->idx;
            return result;
        }
        else{
            temp=temp->next;//往下找
        }
    }
    return -1; 找不到失敗  
}

void delete(hashnode** hashtable,int tablesize){  
    for(int i=0; i<tablesize; i++){
        if(hashtable[i]!=NULL){
            hashnode* temp=hashtable[i];
            while(temp!= NULL){
                hashnode* todelete=temp;
                temp=temp->next;
                free(todelete);
            }
        }

    }
    free(hashtable);
}

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int tablesize=numsSize;
    hashnode** hashtable=(hashnode**)calloc(tablesize,sizeof(hashnode*));
    int* returnarr=(int*)malloc(2*sizeof(int));
    for(int i=0; i<numsSize; i++){
        int comp=target-nums[i];
        int temp=find(hashtable,comp,tablesize);
        if(temp!=-1){
            //find it
            *returnSize=2;
            returnarr[0]=temp;
            returnarr[1]=i;
            delete(hashtable,tablesize);
            return returnarr;
        }
        insert(hashtable, nums[i], i, tablesize);
    }
    //no result
    *returnSize=0;
    delete(hashtable,tablesize);
    free(returnarr);
    return NULL;
}
